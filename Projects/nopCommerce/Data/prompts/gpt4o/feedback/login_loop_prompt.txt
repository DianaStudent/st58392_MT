You are an expert in Selenium automation. Below is a dataset containing HTML structure and UI screenshots for the login process.
Below is a dataset containing:
- HTML structure
- UI screenshots
- Previously generated Python test code
- Error traceback from the last test run
Task:
Fix or regenerate the Python Selenium unittest test for the login process using the provided information.
html_data: {html_data}
previous_code: {previous_code}
error_traceback: {error_message}
URL: http://max/
Credentials: "Email": "admin@admin.com", "Password": "admin"
Test scenario:
1. Open the home page.
2. Click the "Login" button in the top navigation.
3. Wait until the login page loads fully.
4. Fill in the email and password fields using the provided credentials.
5. Click the login button.
6. Verify that the user is logged in by checking the "Log out" button is present in the top navigation.  
Rules:
- Confirm success by checking the "Log out" button is present in the top navigation that the text.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
- Use presence_of_element_located to locate elements. Use visibility checks only when needed.
- Avoid hardcoded XPath text. Always derive selectors and conditions from html_data.
Return only Python code using unittest.