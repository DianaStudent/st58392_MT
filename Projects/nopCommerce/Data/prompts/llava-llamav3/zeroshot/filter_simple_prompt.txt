You are an expert in Selenium automation. Below is a dataset containing HTML structure and textual description of UI screenshots (variable: {screenshots_data}) for the product filter process.
html_data: {html_data}
Task:
Generate a simple Python Selenium test for the product filter process based on the provided html_data and textual description of UI screenshots (variable: {screenshots_data}).
URL: http://max/
Rules:
- Perform a product search using the query "book".
- Apply a price filter by navigating to a URL that includes the price parameter.
- Confirm success by checking that the resulting product grid is updated.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- If any required element is missing, fail the test using self.fail(...).
Return only Python code using unittest.