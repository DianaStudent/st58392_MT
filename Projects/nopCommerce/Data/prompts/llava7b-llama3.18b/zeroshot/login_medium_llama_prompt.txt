You are an expert in Selenium automation. Below is a dataset containing detailed HTML structure 
and a textual description of UI screenshots for the 'login-medium' process.

html_data: {html_data}

screenshots_description: {screen_description}

Task:
Generate a Python Selenium test that strictly follows the described process using only elements from the HTML structure and visual layout.
URL: http://max/
Credentials: "Email": "admin@admin.com", "Password": "admin"
Test scenario:
1. Open the home page.
2. Click the "Login" link.
3. Wait for the login page to load.
4. Enter the email and password.
5. Click the login button to submit the form.
6. Verify that the user is logged in by checking the "Log out" button is present in the top navigation.
Rules:
- Confirm success by checking the "Log out" button is present in the top navigation.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
Return only Python code using unittest.

Return only Python code using unittest.