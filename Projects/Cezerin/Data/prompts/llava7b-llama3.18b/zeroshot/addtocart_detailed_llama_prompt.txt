You are an expert in Selenium automation. Below is a dataset containing detailed HTML structure 
and a textual description of UI screenshots for the 'addtocart-detailed' process.

html_data: {html_data}

screenshots_description: {screen_description}

Task:
Generate a simple Python Selenium test for the add to cart process based on the provided html_data.
URL: http://localhost:3000/
Test scenario:
1. Open home page.
2. Click on product category. (e.g. Category A)
3. Select the first product. (e.g. Product A)
4. Click the "Add to cart" button.
5. Explicitly click the cart icon (shopping bag) to open the mini-cart. Do not wait for the cart to open automatically. 
6. After clicking, wait for the mini-cart to become visible.
7. Verify that the "GO TO CHECKOUT" button is present inside the cart.
Rules:
- The test must explicitly click the shopping cart icon (usually a bag image with class "cart-button") to open the mini-cart. Do not assume it opens automatically.
- After adding a product to the cart, the test must click on the cart button (shopping bag) - Wait for presence of "GO TO CHECKOUT" button using html_data. Its presence is success.
- Use webdriver-manager to manage ChromeDriver.
- Do not hardcode visible text like "Category A" or "Product A" â€” use exact text or href values from html_data.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
- Use presence_of_element_located to locate elements. Use visibility checks only when needed.
- Avoid hardcoded XPath text. Always derive selectors and conditions from html_data.
Return only Python code using unittest.

Return only Python code using unittest.