You are an expert in Selenium automation. Below is a dataset containing HTML structure and UI screenshots for the product filter process.
Below is a dataset containing:
- HTML structure
- UI screenshots
- Previously generated Python test code
- Error traceback from the last test run
Task:
Fix or regenerate the Python Selenium unittest test for the product filter process using the provided information - fix errors based on error traceback.
html_data: {html_data}
previous_code: {previous_code}
error_traceback: {error_message}
Task:
Generate a simple Python Selenium test for applying a basic product filter using the provided html_data and UI screenshots.
URL: http://localhost:3000/category-a
Test scenario:
1. Open the category page.
2. Locate and apply the "Brand A" checkbox filter.
3. Wait 2 seconds to allow the UI to update.
4. Verify that the number of displayed product cards changes.
5. Uncheck the "Brand A" filter.
6. Verify that the original number of product cards is restored.
7. Locate the price slider component.
8. Move one of the slider handles to apply a price range filter.
9. Verify that the product count changes again.
Rules:
- Apply the "Brand A" checkbox filter by clicking on the checkbox input. Wait 2 seconds, then uncheck the "Brand A" filter.
- Use the interactive price slider component to change price filtering.
- Success condition: The number of visible product cards must change after applying and removing the filter.
- Use webdriver-manager to manage ChromeDriver.
- Do not hardcode visible text like "Category A" or "Product A" â€” use exact text or href values from html_data.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
Return only Python code using unittest.