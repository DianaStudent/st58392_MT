You are an expert in Selenium automation. Below is a dataset containing detailed HTML structure 
and  for the 'register' process.

html_data: {html_data}

Task:
Generate a Python Selenium test that strictly follows the described process using only elements from the HTML structure .
Credentials to use:
- gender: 1, (Mr.)
- firstname: Test,
- lastname: User
- Email: dynamically generated, like test_xxxxxx@user.com
- Password: test@user1
- birthday: 01/01/2000

Test scenario:
1. Open the homepage.
2. Click the login link from the top navigation.
3. On the login page, click on the register link (e.g. "No account? Create one here").
4. Fill in the following fields using credentials:
   - Gender, First name, Last name, Email, Password, Birthday
5. Tick checkboxes for privacy, newsletter, terms, etc.
6. Submit the registration form.
7. Wait for the redirect after login.
8. Confirm that login was successful by checking that:
   - The "Sign out" button is present in the top navigation
   - The username (e.g. "test user") is also visible in the top navigation.
Rules:
- Confirm success by checking that the text "Sign out" appear.
- Use Credentials only, but generate dynamic email
- Do not rely on dynamic ID values â€” use label or section attributes like data-name instead.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
- Use presence_of_element_located to locate elements. Use visibility checks only when needed.
- Avoid hardcoded XPath text. Always derive selectors and conditions from html_data.
Return only Python code using unittest.

Return only Python code using unittest.