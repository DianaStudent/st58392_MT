You are an expert in Selenium automation. Below is a dataset containing HTML structure and UI screenshots for the product filter process.
html_data: {html_data}
Task:
Generate a simple Python Selenium test for the product filter process based on the provided html_data and UI screenshots.
URL: http://localhost:8080/en/
Test scenario:
1. Open the home page.
2. Navigate to a product category.
3. On the category page, wait for the filter sidebar to be present.
4. Select the filter using label-based selection.
5. Wait for the page to update, and verify that the number of visible product items is reduced.
6. Then click the "Clear all" button to remove filters.
7. Verify that the number of products returns to the original count.
Rules:
- Wait for the filter sidebar.
- Select a checkbox filter.
- Do not rely on dynamic ID values — use label or section attributes like data-name instead.
- After applying the filter, verify that the number of visible product items changes.
- Use attribute-based selectors, not dynamic IDs — rely on label text and section data-name values.
- Success is when the product count changes after applying and removing filters.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
Return only Python code using unittest.