You are an expert in Selenium automation. Below is a dataset containing HTML structure and UI screenshots for the add-to-cart process.
html_data: {html_data}
Task:
Generate a simple Python Selenium test for the add to cart process based on the provided html_data.
URL: http://localhost:8000/dk
Test scenario:
1. Open home page.
2. Click the menu button ("Menu").
3. Click the "Store" link.
4. Click on a product image (Thumbnail) - first product.
5. Select size by clicking the size button "L".
6. Add the product to the cart.
7. Explicitly click the cart button to open the cart.
8. Verify that the "GO TO CHECKOUT" button is present.
Rules:
- The test must explicitly click the shopping cart button cart. Do not assume it opens automatically.
- After adding a product to the cart, the test must click on the cart button (shopping bag) - Wait for presence of "GO TO CHECKOUT" button using html_data. Its presence is success.
- Use webdriver-manager to manage ChromeDriver.
- When locating elements, always prefer using data-testid attributes if they exist in html_data
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
- Use presence_of_element_located to locate elements. Use visibility checks only when needed.
- Avoid hardcoded XPath text. Always derive selectors and conditions from html_data.
- The browser window should be launched in fullscreen (maximized) mode before interacting with the page.
Return only Python code using unittest.