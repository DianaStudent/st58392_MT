You are an expert in Selenium automation. Below is a dataset containing detailed HTML structure 
and a textual description of UI screenshots for the 'checkout-medium' process.

html_data: {html_data}

screenshots_description: {screen_description}

Task:
Generate a Python Selenium test that strictly follows the described process using only elements from the HTML structure and visual layout.
URL: http://localhost/
Credentials: "Email": test22@user.com, "Password": "test**11"
Test scenario:
1. Open the home page.
2. Log in using the provided credentials.
3. Add product to the cart.
4. Open the cart and navigate to the cart page.
5. Click "Proceed to Checkout".
6. Fill in the billing form.
7. Accept terms and proceed.
8. Confirm success if form is filled.
Rules:
- The test should perform login, add products to the cart, go to cart page, click "Proceed to Checkout", and fill in the billing form.
- Wait for region (state) select to appear dynamically after filling address.
- Confirm success by verifying that the billing form is fiiled.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
Return only Python code using unittest.

Return only Python code using unittest.