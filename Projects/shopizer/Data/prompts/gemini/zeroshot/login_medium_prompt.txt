You are an expert in Selenium automation. Below is a dataset containing HTML structure and UI screenshots for the login process.
html_data: {html_data}
Task:
Generate a simple Python Selenium test for the login process based on the provided html_data and UI screenshots.
URL: http://localhost/
Credentials: Email: test2@user.com, Password: test**11

Test scenario:
1. Open the homepage.
2. Click the account icon in the top navigation bar.
3. Click the "Login" link.
4. Fill in the email and password fields.
5. Submit the login form.
6. Confirm success by checking:
   - That the browser is redirected to a page with "/my-account" in the URL.   
Rules:
- The test should click the account icon, then click the "Login" link to open the login form.
- Fill in the email and password fields.
- Confirm success by checking that the browser is redirected to a page containing "/my-account" in the URL.
- Use webdriver-manager to manage ChromeDriver.
- Use selectors strictly from html_data.
- Use WebDriverWait with a timeout of 20 seconds before interacting with elements.
- Use unittest with setUp() and tearDown().
- Before asserting any element or text, check that it exists and is not empty.
- If any required element is missing, fail the test using self.fail(...).
Return only Python code using unittest.